{"ast":null,"code":"var _jsxFileName = \"/home/vivan/Estudos/React.js/SON_4_Iniciando_com_redux/redux_app/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { clickHelloAction } from './actions/index';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.hadleInputChange = event => {\n      this.setState({\n        text: event.target.value\n      });\n    };\n\n    this.state = {\n      text: ''\n    };\n  }\n\n  render() {\n    const text = this.state.text;\n    const _this$props = this.props,\n          msg = _this$props.msg,\n          clickHelloAction = _this$props.clickHelloAction;\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      onChange: this.handleInputChange(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"button\",\n      onClick: () => clickHelloAction(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, \"Click to Dispatch Action\"), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, msg));\n  }\n\n}\n/*\n * No momento em que um determinado evento acontecer a função mapStateToProps irá\n * capturar dados do state irá passar para a props, a partir deste momento a função\n * de render irá rodar novamente pq ouve uma atualização do state.\n *\n * Isso tudo se deve a função connect que faz ligaçao entre o componente (classe) e a\n * store (se existe state, por consequencia existem props).\n * Isso se dá pela função mapStateToProps, que serve para passar e receber dados.\n *\n * Tambem existe outra função, que por sua vez é responsável pela chamada das\n * actions creators, trata-se da função mapDispachToProps. É uma forma de capturar\n * eventos do componente e move-los para dentro de uma action.\n */\n\n\nconst mapStateToProps = store => {\n  return {\n    msg: store.clickReducer.msg\n  };\n};\n\nconst mapDispachToProps = dispatch => bindActionCreators({\n  clickHelloAction\n}, dispatch);\n\nexport default connect(mapStateToProps, mapDispachToProps)(App);","map":{"version":3,"sources":["/home/vivan/Estudos/React.js/SON_4_Iniciando_com_redux/redux_app/src/App.js"],"names":["React","Component","connect","bindActionCreators","clickHelloAction","App","constructor","props","hadleInputChange","event","setState","text","target","value","state","render","msg","handleInputChange","mapStateToProps","store","clickReducer","mapDispachToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,WAAP;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,kBAAT,QAAmC,OAAnC;AACA,SAASC,gBAAT,QAAiC,iBAAjC;;AAEA,MAAMC,GAAN,SAAkBJ,SAAlB,CAA2B;AACvBK,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAQnBC,gBARmB,GAQCC,KAAD,IAAW;AAC1B,WAAKC,QAAL,CAAc;AACVC,QAAAA,IAAI,EAAEF,KAAK,CAACG,MAAN,CAAaC;AADT,OAAd;AAGH,KAZkB;;AAGf,SAAKC,KAAL,GAAa;AACTH,MAAAA,IAAI,EAAE;AADG,KAAb;AAGH;;AAQDI,EAAAA,MAAM,GAAG;AAAA,UACGJ,IADH,GACY,KAAKG,KADjB,CACGH,IADH;AAAA,wBAE6B,KAAKJ,KAFlC;AAAA,UAEGS,GAFH,eAEGA,GAFH;AAAA,UAEQZ,gBAFR,eAEQA,gBAFR;AAGL,WACI;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,QAAQ,EAAG,KAAKa,iBAAL,EAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEI;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,OAAO,EAAG,MAAMb,gBAAgB,EAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAFJ,EAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAMY,GAAN,CAHJ,CADJ;AAOH;;AAzBsB;AA4B3B;;;;;;;;;;;;;;;AAcA,MAAME,eAAe,GAAIC,KAAD,IAAW;AAC/B,SAAO;AACHH,IAAAA,GAAG,EAAEG,KAAK,CAACC,YAAN,CAAmBJ;AADrB,GAAP;AAGH,CAJD;;AAMA,MAAMK,iBAAiB,GAAIC,QAAD,IAAcnB,kBAAkB,CAAC;AAACC,EAAAA;AAAD,CAAD,EAAqBkB,QAArB,CAA1D;;AAEA,eAAepB,OAAO,CAACgB,eAAD,EAAkBG,iBAAlB,CAAP,CAA4ChB,GAA5C,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { clickHelloAction } from './actions/index';\n\nclass App extends Component{\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            text: ''\n        }\n    }\n\n    hadleInputChange = (event) => {\n        this.setState({\n            text: event.target.value\n        });\n    };\n\n    render() {\n        const { text } = this.state;\n        const { msg, clickHelloAction } = this.props;\n        return (\n            <div className=\"App\">\n                <input type=\"text\" onChange={ this.handleInputChange() }/>\n                <button type=\"button\" onClick={ () => clickHelloAction() }>Click to Dispatch Action</button>\n                <h1>{ msg }</h1>\n            </div>\n        );\n    }\n}\n\n/*\n * No momento em que um determinado evento acontecer a função mapStateToProps irá\n * capturar dados do state irá passar para a props, a partir deste momento a função\n * de render irá rodar novamente pq ouve uma atualização do state.\n *\n * Isso tudo se deve a função connect que faz ligaçao entre o componente (classe) e a\n * store (se existe state, por consequencia existem props).\n * Isso se dá pela função mapStateToProps, que serve para passar e receber dados.\n *\n * Tambem existe outra função, que por sua vez é responsável pela chamada das\n * actions creators, trata-se da função mapDispachToProps. É uma forma de capturar\n * eventos do componente e move-los para dentro de uma action.\n */\n\nconst mapStateToProps = (store) => {\n    return {\n        msg: store.clickReducer.msg\n    }\n};\n\nconst mapDispachToProps = (dispatch) => bindActionCreators({clickHelloAction}, dispatch);\n\nexport default connect(mapStateToProps, mapDispachToProps)(App);\n"]},"metadata":{},"sourceType":"module"}