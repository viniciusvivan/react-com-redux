{"ast":null,"code":"var _jsxFileName = \"/home/vivan/Estudos/React.js/SON_4_Iniciando_com_redux/redux_app/src/App.js\";\nimport React, { Component } from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport { connect } from 'react-redux';\nimport store from \"./store\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      msg: ''\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      className: \"App-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: logo,\n      className: \"App-logo\",\n      alt: \"logo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21\n      },\n      __self: this\n    }, \"Edit \", React.createElement(\"code\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }, \"src/App.js\"), \" and save to reload.\"), React.createElement(\"a\", {\n      className: \"App-link\",\n      href: \"https://reactjs.org\",\n      target: \"_blank\",\n      rel: \"noopener noreferrer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, \"Learn React\")));\n  }\n\n}\n/*\n * No momento em que um determinado evento acontecer a função mapStateToProps irá\n * capturar dados do state irá passar para a props, a partir deste momento a função\n * de render irá rodar novamente pq ouve uma atualização do state.\n *\n * Isso tudo se deve a função connect que faz ligaçao entre o componente (classe) e a\n * store (se existe state, por consequencia existem props).\n * Isso se dá pela função mapStateToProps, que serve para passar e receber dados.\n *\n * Tambem existe outra função, que por sua vez é responsável pela chamada das\n * actions creators, trata-se da função mapDispachToProps. É uma forma de capturar\n * eventos do componente e move-los para dentro de uma action.\n */\n\n\nconst mapStateToProps = store => {\n  return {\n    msg: store.clickReducer.msg\n  };\n};\n\nconst mapDispachToProps = dispatch => {};\n\nexport default connect(mapStateToProps)(App);","map":{"version":3,"sources":["/home/vivan/Estudos/React.js/SON_4_Iniciando_com_redux/redux_app/src/App.js"],"names":["React","Component","connect","store","App","constructor","props","state","msg","render","logo","mapStateToProps","clickReducer","mapDispachToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAEA,OAAO,WAAP;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,KAAP,MAAkB,SAAlB;;AAEA,MAAMC,GAAN,SAAkBH,SAAlB,CAA2B;AACvBI,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACTC,MAAAA,GAAG,EAAE;AADI,KAAb;AAGH;;AAEDC,EAAAA,MAAM,GAAG;AACL,WACI;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAQ,MAAA,SAAS,EAAC,YAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,GAAG,EAAEC,IAAV;AAAgB,MAAA,SAAS,EAAC,UAA1B;AAAqC,MAAA,GAAG,EAAC,MAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADT,yBAFJ,EAKI;AACI,MAAA,SAAS,EAAC,UADd;AAEI,MAAA,IAAI,EAAC,qBAFT;AAGI,MAAA,MAAM,EAAC,QAHX;AAII,MAAA,GAAG,EAAC,qBAJR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBALJ,CADJ,CADJ;AAkBH;;AA5BsB;AA+B3B;;;;;;;;;;;;;;;AAcA,MAAMC,eAAe,GAAIR,KAAD,IAAW;AAC/B,SAAO;AACHK,IAAAA,GAAG,EAAEL,KAAK,CAACS,YAAN,CAAmBJ;AADrB,GAAP;AAGH,CAJD;;AAMA,MAAMK,iBAAiB,GAAIC,QAAD,IAAc,CAEvC,CAFD;;AAIA,eAAeZ,OAAO,CAACS,eAAD,CAAP,CAAyBP,GAAzB,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { connect } from 'react-redux';\nimport store from \"./store\";\n\nclass App extends Component{\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            msg: ''\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                    <p>\n                        Edit <code>src/App.js</code> and save to reload.\n                    </p>\n                    <a\n                        className=\"App-link\"\n                        href=\"https://reactjs.org\"\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                    >\n                        Learn React\n                    </a>\n                </header>\n            </div>\n        );\n    }\n}\n\n/*\n * No momento em que um determinado evento acontecer a função mapStateToProps irá\n * capturar dados do state irá passar para a props, a partir deste momento a função\n * de render irá rodar novamente pq ouve uma atualização do state.\n *\n * Isso tudo se deve a função connect que faz ligaçao entre o componente (classe) e a\n * store (se existe state, por consequencia existem props).\n * Isso se dá pela função mapStateToProps, que serve para passar e receber dados.\n *\n * Tambem existe outra função, que por sua vez é responsável pela chamada das\n * actions creators, trata-se da função mapDispachToProps. É uma forma de capturar\n * eventos do componente e move-los para dentro de uma action.\n */\n\nconst mapStateToProps = (store) => {\n    return {\n        msg: store.clickReducer.msg\n    }\n};\n\nconst mapDispachToProps = (dispatch) => {\n\n};\n\nexport default connect(mapStateToProps)(App);\n"]},"metadata":{},"sourceType":"module"}